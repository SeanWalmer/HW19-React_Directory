{"version":3,"sources":["components/header/index.js","components/DataTable/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Table","props","onClick","sortName","sortRole","sortRace","currentCrew","map","member","key","id","src","picture","alt","width","height","name","role","race","Main","state","crew","sort","first","second","nameA","toUpperCase","nameB","setState","roleA","roleB","raceA","raceB","filterCrew","event","filterBy","target","value","newCrew","filter","toLowerCase","includes","console","log","onChange","this","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"29EAWeA,MARf,WACE,OACI,6BACI,wBAAIC,UAAU,uBAAd,iC,+CC4BKC,MA9Bf,SAAeC,GAEX,OACI,2BAAOF,UAAU,sBACb,+BACI,4BACI,6BAEA,wBAAIG,QAAS,kBAAMD,EAAME,aAAzB,OAAyC,0BAAMJ,UAAU,2BAAhB,kBACzC,wBAAIG,QAAS,kBAAMD,EAAMG,aAAzB,OAAyC,0BAAML,UAAU,2BAAhB,kBACzC,wBAAIG,QAAS,kBAAMD,EAAMI,aAAzB,OAAyC,0BAAMN,UAAU,2BAAhB,oBAIjD,+BAGKE,EAAMK,YAAYC,KAAI,SAAAC,GAAM,OACzB,wBAAIC,IAAKD,EAAOE,IACZ,4BAAI,yBAAKC,IAAKH,EAAOI,QAASC,IAAI,uBAAuBC,MAAM,KAAKC,OAAO,QAC3E,4BAAKP,EAAOQ,MACZ,4BAAKR,EAAOS,MACZ,4BAAKT,EAAOU,aCkGrBC,E,4MArHXC,MAAQ,CACJC,OACAf,YAAae,G,EAGjBlB,SAAW,WACP,IAAMG,EAAc,EAAKc,MAAMd,YAAYgB,MAAK,SAAUC,EAAOC,GAC7D,IAAIC,EAAQF,EAAMP,KAAKU,cACnBC,EAAQH,EAAOR,KAAKU,cACxB,OAAID,EAAQE,GACA,EAERF,EAAQE,EACD,EAGJ,KAGX,EAAKC,SAAS,CAAEtB,iB,EAEpBF,SAAW,WACP,IAAME,EAAc,EAAKc,MAAMd,YAAYgB,MAAK,SAAUC,EAAOC,GAC7D,IAAIK,EAAQN,EAAMN,KAAKS,cACnBI,EAAQN,EAAOP,KAAKS,cACxB,OAAIG,EAAQC,GACA,EAERD,EAAQC,EACD,EAGJ,KAGX,EAAKF,SAAS,CAAEtB,iB,EAEpBD,SAAW,WACP,IAAMC,EAAc,EAAKc,MAAMd,YAAYgB,MAAK,SAAUC,EAAOC,GAC7D,IAAIO,EAAQR,EAAML,KAAKQ,cACnBM,EAAQR,EAAON,KAAKQ,cACxB,OAAIK,EAAQC,GACA,EAERD,EAAQC,EACD,EAIJ,KAGX,EAAKJ,SAAS,CAAEtB,iB,EA4BpB2B,WAAa,SAAAC,GACT,IAAMC,EAAWD,EAAME,OAAOC,MACxBC,EAAU,EAAKlB,MAAMC,KAAKkB,QAAQ,SAAA/B,GAAM,OAAIA,EAAOQ,KAAKwB,cAAcC,SAASN,MACrF,EAAKP,SAAS,CACVtB,YAAagC,IAEjBI,QAAQC,IAAIL,I,uDAMZ,OACI,yBAAKvC,UAAU,aACX,uBAAGA,UAAU,cAAb,mFACA,6BACA,yBAAKA,UAAU,OACX,uBAAGA,UAAU,oCAAb,UACA,2BACAiB,KAAK,WACLjB,UAAU,aACV6C,SAAUC,KAAKZ,WACfa,KAAK,UAGT,kBAAC,EAAD,CACIxC,YAAauC,KAAKzB,MAAMd,YACxBH,SAAU0C,KAAK1C,SACfC,SAAUyC,KAAKzC,SACfC,SAAUwC,KAAKxC,gB,GA/GhB0C,IAAMC,W,MCUVC,MATf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.e3c733b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n      <div>\r\n          <h1 className=\"center-align header\">Normandy SR2 Crew Directory</h1>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Table(props) {\r\n    // console.log(props)\r\n    return (\r\n        <table className='highlight centered'>\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    {/* () => functions are to delay functions till we actually click and so they dont launch on page load */}\r\n                    <th onClick={() => props.sortName()}>Name<span className=\"material-icons sortIcon\">sort_by_alpha</span></th>\r\n                    <th onClick={() => props.sortRole()}>Role<span className=\"material-icons sortIcon\">import_export</span></th>\r\n                    <th onClick={() => props.sortRace()}>Race<span className=\"material-icons sortIcon\">import_export</span></th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                {/* Cycles through the crew list passed in through \r\n                props and cretes an entry for each */}\r\n                {props.currentCrew.map(member => (\r\n                    <tr key={member.id}>\r\n                        <td><img src={member.picture} alt=\"crew member headshot\" width=\"50\" height=\"50\"></img></td>\r\n                        <td>{member.name}</td>\r\n                        <td>{member.role}</td>\r\n                        <td>{member.race}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport crew from '../me.json'\r\nimport \"./style.css\";\r\nimport Table from '../DataTable';\r\n\r\nclass Main extends React.Component {\r\n\r\n    state = {\r\n        crew,\r\n        currentCrew: crew\r\n    };\r\n\r\n    sortName = () => {\r\n        const currentCrew = this.state.currentCrew.sort(function (first, second) {\r\n            var nameA = first.name.toUpperCase(); // ignore upper and lowercase\r\n            var nameB = second.name.toUpperCase(); // ignore upper and lowercase\r\n            if (nameA < nameB) {\r\n                return -1;\r\n            }\r\n            if (nameA > nameB) {\r\n                return 1;\r\n            }\r\n            // names must be equal\r\n            return 0;\r\n        });\r\n        //   console.log(crew);\r\n        this.setState({ currentCrew });\r\n    };\r\n    sortRole = () => {\r\n        const currentCrew = this.state.currentCrew.sort(function (first, second) {\r\n            var roleA = first.role.toUpperCase(); // ignore upper and lowercase\r\n            var roleB = second.role.toUpperCase(); // ignore upper and lowercase\r\n            if (roleA < roleB) {\r\n                return -1;\r\n            }\r\n            if (roleA > roleB) {\r\n                return 1;\r\n            }\r\n            // names must be equal\r\n            return 0;\r\n        });\r\n        //   console.log(crew);\r\n        this.setState({ currentCrew });\r\n    };\r\n    sortRace = () => {\r\n        const currentCrew = this.state.currentCrew.sort(function (first, second) {\r\n            var raceA = first.race.toUpperCase(); // ignore upper and lowercase\r\n            var raceB = second.race.toUpperCase(); // ignore upper and lowercase\r\n            if (raceA < raceB) {\r\n                return -1;\r\n            }\r\n            if (raceA > raceB) {\r\n                return 1;\r\n            }\r\n\r\n            // names must be equal\r\n            return 0;\r\n        });\r\n        //   console.log(crew);\r\n        this.setState({ currentCrew });\r\n    };\r\n\r\n    /* The function below is meant to compbine all three function above into a \r\n    function that is reuable and I can just pass in what I want to search by\r\n    but I am having trouble figuring out how to select a property based on an\r\n    argument passed in. This is something to revisit when I have time to \r\n    improve the application */\r\n\r\n    // sort = (type) => {\r\n    //     let property = type\r\n    //     const crew = this.state.crew.sort(function(first, second) {\r\n    //         var SelectionA = first.type; // ignore upper and lowercase\r\n    //         var SelectionB = second.type; // ignore upper and lowercase\r\n    //         if (SelectionA < SelectionB) {\r\n    //           return -1;\r\n    //         }\r\n    //         if (SelectionA > SelectionB) {\r\n    //           return 1;\r\n    //         }\r\n\r\n    //         // names must be equal\r\n    //         return 0;\r\n    //       });\r\n    //     //   console.log(crew);\r\n    //       this.setState({ crew });\r\n    // };\r\n\r\n    filterCrew = event => {\r\n        const filterBy = event.target.value\r\n        const newCrew = this.state.crew.filter( member => member.name.toLowerCase().includes(filterBy))\r\n        this.setState({ \r\n            currentCrew: newCrew\r\n        })\r\n        console.log(newCrew)\r\n    };\r\n\r\n    render() {\r\n        // console.log(this.state.crew);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <p className=\"left-align\">sort through the crew directory by clicking the headers or typing in the filter</p>\r\n                <br></br>\r\n                <div className=\"row\">\r\n                    <p className=\"col s12 m1 btn-small disabled up\">Filter</p>\r\n                    <input \r\n                    name=\"filterBy\"\r\n                    className=\"col s12 m3\" \r\n                    onChange={this.filterCrew}\r\n                    type=\"text\"\r\n                    />\r\n                </div>\r\n                <Table\r\n                    currentCrew={this.state.currentCrew}\r\n                    sortName={this.sortName}\r\n                    sortRole={this.sortRole}\r\n                    sortRace={this.sortRace}\r\n                // sort={this.sort}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\n// import logo from './logo.svg';\nimport Header from './components/header/'\nimport Main from './components/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}